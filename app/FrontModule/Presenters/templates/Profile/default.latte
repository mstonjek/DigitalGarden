{block content}
    <div class="profiles-container">

        <div class="header-navigation">
            <a class="return-emoji" n:href="Dashboard:default">üîô</a>
            <p class="number-of-users">Number of users: 2</p>
        </div>

        <div class="main-content">

            <div class="search-section">
                <h1 class="search-title">Find your Gardener:</h1>
                <div class="search-div">
                    <!-- TODO: The user can see all users by entering 3 spaces :/ Not fixing now xd -->
                    <div class="search-input" id="search-input" contenteditable="true" onkeydown="preventEnter(event)" oninput="search(this.innerText)">@</div>
                </div>
            </div>

            <div id="users-container" class="profiles-section">
                    <div id="result" class="profiles-window">
                        <!-- Profile cards style in the script block -->

                    </div>
                    <div id="loading-indicator" style="display: none;">Loading...</div>
            </div>

        </div>

    </div>

{/block}

{block css}
    <style>

        body {
            background-color: #ddf6dd;
            line-height: 1.6;
        }

        .profiles-container {
            max-width: calc(100% - 30rem);
            margin: 2.5rem auto;
            padding: 3.5rem 5rem;
            background-color: #e5ffe5;
            background-image: url('https://www.transparenttextures.com/patterns/little-pluses.png');
            border-radius: 2.5rem;
            text-align: center;
            box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.25);
            border: 0.4rem dashed #88bd8f;
        }

        .header-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .return-emoji {
            text-decoration: none;
            font-size: 3rem;
            transition: transform 0.3s ease, filter 0.3s ease;
            filter: drop-shadow(0 0 0.5rem rgba(0, 0, 0, 0.3));
        }

        .return-emoji:hover {
            transform: scale(1.2);
            filter: brightness(1.2);
        }

        .number-of-users {
            font-size: 1.65rem;
        }

        .main-content {
            margin-top: 0.5rem;
        }

        .search-section {
            display: flex;
            align-items: baseline;
            justify-content: flex-start;
            gap: 1.35rem;
        }

        .search-title {
            font-size: 1.9rem;
            margin-left: 1.5rem;
            margin-top: 1.5rem;
            font-weight: bold;
            color: #4caf50;
        }

        .search-div {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            width: 6rem;
            height: 3rem;
            border-radius: 0.5rem;
        }

        .search-input {
            font-style: italic;
            flex: 1;
            outline: none;
            white-space: pre;
            word-wrap: break-word;
            min-width: 0;
            padding: 0;
            margin: 0;
            font-size: 1.65rem;
            color: #666;
        }



        .profiles-section {
            display: inline-block;
            border: 0.1rem solid darkslategrey;
            margin-top: 1.5rem;
            min-width: 83%;
            padding: 1.5rem;
            border-radius: 1rem;
            min-height: 22.75rem;
            background-image: url("https://www.transparenttextures.com/patterns/brick-wall.png");
            background-color: #AA4A44;
        }

        .profiles-window {

        }








        .user-card {
            border: 1px solid;
            border-radius: 1rem;
            overflow: hidden;
            text-align: center;
            padding: 1rem;
        }

        .user-avatar {
            border-radius: 50%;
            width: 80px;
            height: 80px;
            object-fit: cover;
        }




    </style>
{/block}

{block script}
    <script>
        function search(rawQuery) {
            const query = rawQuery.startsWith('@') ? rawQuery.substring(1) : rawQuery;

            if (query.length > 2) {
                const xhttp = new XMLHttpRequest();
                const loadingIndicator = document.getElementById('loading-indicator');
                const resultContainer = document.getElementById('result');
                const endpoint = {link Profile:search};

                loadingIndicator.style.display = 'block';

                xhttp.onload = function () {
                    loadingIndicator.style.display = 'none';

                    if (xhttp.status === 200) {
                        let response = JSON.parse(this.responseText);
                        resultContainer.innerHTML = '';

                        response.forEach(user => {
                            let card = document.createElement('div');
                            card.className = 'user-card';

                            let cardContent = `
                                <div class="user-header">
                                    <img src="${ user.avatarUrl}" alt="Avatar of ${ user.name}" class="user-avatar">
                                    <div class="user-info">
                                        <h2 class="user-name" >${ user.name}</h2>
                                        <p class="user-username">${ user.username}</p>
                                        ${ user.location ? `<div class="user-location"><span>üåç</span> ${ user.location}</div>` : ''}
                                    </div>
                                </div>
                                <a href="Profile:Show ${ user.username}" class="user-profile-link">View Profile</a>
                                ${ user.flowerId ? `<a href="Garden:flower ${ user.flowerId}" class="flower-profile-link">View Flower</a>` : '<p>Don\'t have flower _:/</p>'}
                            `;

                            card.innerHTML = cardContent;
                            resultContainer.appendChild(card);
                        });
                    } else {
                        console.error('Error:', xhttp.statusText);
                    }
                };

                xhttp.onerror = function () {
                    loadingIndicator.style.display = 'none';
                    console.error('Request failed');
                };

                xhttp.open("GET", `${ endpoint}?q=${ query}`, true);
                xhttp.send();

            }
        }

        function focusInput() {
            const input = document.getElementById('search-input');
            input.focus();
            const range = document.createRange();
            const sel = window.getSelection();
            range.selectNodeContents(input);
            range.collapse(false);
            sel.removeAllRanges();
            sel.addRange(range);
        }

        function preventEnter(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        }

        document.addEventListener('DOMContentLoaded', focusInput);
    </script>
{/block}
